#ifndef _LIVE555COMMON_H
#define _LIVE555COMMON_H

typedef struct _LIVE555_FRM_DATA {
    UINT32 uiIndex;
    UINT32 uiAddr;
    UINT32 uiSize;
} LIVE555_FRM_DATA;

typedef UINT32 (*LIVE555_FP_OPEN_SESSION)(char* pPath);
typedef UINT32 (*LIVE555_FP_CLOSE_SESSION)(void);
typedef UINT32 (*LIVE555_FP_SEEK)(UINT32 uiFrameIdx,UINT32* pAlignedIdx);
typedef UINT32 (*LIVE555_FP_GET_VIDEO)(UINT32 uiFrameIdx,LIVE555_FRM_DATA* pVid);
typedef UINT32 (*LIVE555_FP_GET_AUDIO)(UINT32 uiFrameIdx,LIVE555_FRM_DATA* pAud);


typedef struct _LIVE555_INTERFACE_CB{
    LIVE555_FP_OPEN_SESSION m_fpOpen;
    LIVE555_FP_CLOSE_SESSION m_fpClose;
    LIVE555_FP_SEEK m_fpSeek;
    LIVE555_FP_GET_VIDEO m_fpGetVideo;
    LIVE555_FP_GET_AUDIO m_fpGetAudio;
    UINT32 m_uiPortNum;
    UINT32 m_uiSendBufSize;
    UINT32 m_uiTypeOfService; //IPTOS_LOWDELAY, IPTOS_THROUGHPUT, IPTOS_RELIABILITY, IPTOS_LOWCOST
}LIVE555_INTERFACE_CB;

typedef struct _LIVE555_VIDEO_INFO{
    UINT8* pSPS;
    UINT32 uiSizeSPS;
    UINT8* pPPS;
    UINT32 uiSizePPS;
    UINT32 uiFps;
    UINT32 uiTotoalFrame;
}LIVE555_VIDEO_INFO;

typedef struct _LIVE555_AUDIO_INFO{
    UINT32 uiType; //0:PCM,1:AAC
    UINT32 uiSamplePerSecond;
    UINT32 uiBitPerSample;
    UINT32 uiChannelCnt;
    UINT32 uiTotalTimeInMs;
}LIVE555_AUDIO_INFO;

typedef enum _LIVE555_CLIENT_EVENT{
    LIVE555_CLIENT_EVENT_FAIL, //fail to open
    LIVE555_CLIENT_EVENT_DESC, //get video /audio description (sps/pps/channel/sample rate)
    LIVE555_CLIENT_EVENT_PLAY, //start playing
    LIVE555_CLIENT_EVENT_FRAME_VIDEO, //a video frame arrival
    LIVE555_CLIENT_EVENT_FRAME_AUDIO, //a audio frame arrival
}LIVE555_CLIENT_EVENT;

typedef void (*LIVE555_FP_CLIENT_EVENT)(LIVE555_CLIENT_EVENT client_event);

typedef enum _LIVE555_SERVER_EVENT{
    LIVE555_SERVER_EVENT_OPTIONS,
    LIVE555_SERVER_EVENT_DESCRIBE,
    LIVE555_SERVER_EVENT_SETUP,
    LIVE555_SERVER_EVENT_TEARDOWN,
    LIVE555_SERVER_EVENT_PLAY,
    LIVE555_SERVER_EVENT_PAUSE,
    LIVE555_SERVER_EVENT_FRAME_START_I,
    LIVE555_SERVER_EVENT_FRAME_START_P,
    LIVE555_SERVER_EVENT_FRAME_END,
}LIVE555_SERVER_EVENT;

typedef void (*LIVE555_FP_SERVER_EVENT)(LIVE555_SERVER_EVENT server_event);

typedef struct _LIVE555_CLIENT_INFO{
    char*  url;
    LIVE555_FP_CLIENT_EVENT fpEvent;
}LIVE555_CLIENT_INFO;

typedef enum _LIVE555_IPC{
    LIVE555_IPC_UNKNOWN = 0,
    LIVE555_IPC_UNKNOWN_ACK,
    LIVE555_IPC_OPEN, //LIVE555_IPC_OPEN_S
    LIVE555_IPC_OPEN_ACK,
    LIVE555_IPC_CLOSE, //no structure
    LIVE555_IPC_CLOSE_ACK,
    LIVE555_IPC_SEEK, //LIVE555_IPC_SEEK_S
    LIVE555_IPC_SEEK_ACK,
    LIVE555_IPC_GET_VIDEO, //LIVE555_IPC_GET_VIDEO_S
    LIVE555_IPC_GET_VIDEO_ACK,
    LIVE555_IPC_GET_AUDIO, //LIVE555_IPC_GET_AUDIO_S
    LIVE555_IPC_GET_AUDIO_ACK,
    LIVE555_IPC_SERVER_EVENT,
    LIVE555_IPC_SERVER_EVENT_ACK,
    LIVE555_IPC_PROCESS_END, //no structure
    LIVE555_IPC_PROCESS_END_ACK,
}LIVE555_IPC;

typedef struct _LIVE555_IPC_MSG{
    long mtype;
    UINT32 uiIPC; //LIVE555_IPC
}LIVE555_IPC_MSG;

typedef struct _LIVE555_IPC_OPEN_S{
    char Path[64];
    LIVE555_VIDEO_INFO LvVdoInfo;
    LIVE555_AUDIO_INFO LvAudInfo;
}LIVE555_IPC_OPEN_S;

typedef struct _LIVE555_IPC_SEEK_S{
    UINT32 uiFrameIdx;
    UINT32 uiAlignedIdx;
}LIVE555_IPC_SEEK_S;

typedef struct _LIVE555_IPC_GET_VIDEO_S{
    UINT32 uiFrameIdx;
    LIVE555_FRM_DATA Vid;
}LIVE555_IPC_GET_VIDEO_S;

typedef struct _LIVE555_IPC_GET_AUDIO_S{
    UINT32 uiFrameIdx;
    LIVE555_FRM_DATA Aud;
}LIVE555_IPC_GET_AUDIO_S;

typedef struct _LIVE555_IPC_SERVER_EVENT_S{
    UINT32 uiEvent; //LIVE555_SERVER_EVENT
}LIVE555_IPC_SERVER_EVENT_S;

#endif
